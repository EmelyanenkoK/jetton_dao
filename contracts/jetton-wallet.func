#include "stdlib.func";
#include "jetton-utils.func";
#include "dao-utils.func";
#include "error-codes.func";
#include "op-codes.func";
#include "params.func";
#include "messages.func";

const int min_tons_for_storage = 10000000; ;;ONE_TON / 100;
;; Note that 2 * gas_consumptions is expected to be able to cover fees on both wallets (sender and receiver)
;; and also constant fees on inter-wallet interaction, in particular fwd fee on state_init transfer
;; that means that you need to reconsider this fee when:
;; a) jetton logic become more costly
;; b) jetton-wallet code become larger or smaller
;; c) global fee changes / different workchain
;; if jetton_wallet_code is not stored in library cell use 19000000
const int gas_consumption = external_param::wallet_gas_consumption;
const int burn_notification = 750000000;

{-
  Storage
  storage#_ balance:Coins
            owner_address:MsgAddressInt
            jetton_master_address:MsgAddressInt
            jetton_wallet_code:^Cell
            locked:Coins lock_expiration:uint48
            = Storage;
-}

(int, slice, slice, cell, int, int) _load_data() inline {
  slice ds = get_data().begin_parse();
  return (ds~load_coins(),
          ds~load_msg_addr(),
          ds~load_msg_addr(),
          ds~load_ref(),
          ds~load_coins(), ds~load_uint(48)
         );
}

(int, slice, slice, cell, int, int) load_data() inline {
  (int balance, slice owner_address,
          slice jetton_master_address, cell jetton_wallet_code,
          int locked, int lock_expiration) = _load_data();
  if(lock_expiration < now()) {
    balance += locked;
    locked = 0;
    lock_expiration = 0;
  }
  return (balance, owner_address, jetton_master_address, jetton_wallet_code, locked, lock_expiration);
}

() save_data (int balance, slice owner_address,
              slice jetton_master_address, cell jetton_wallet_code,
              int locked, int lock_expiration) impure inline {
  set_data(
           pack_jetton_wallet_data(balance,
                                   owner_address,
                                   jetton_master_address,
                                   jetton_wallet_code,
                                   locked,
                                   lock_expiration)
          );
}

{-
  transfer query_id:uint64 amount:(VarUInteger 16) destination:MsgAddress
           response_destination:MsgAddress custom_payload:(Maybe ^Cell)
           forward_ton_amount:(VarUInteger 16) forward_payload:(Either Cell ^Cell)
           = InternalMsgBody;
  internal_transfer  query_id:uint64 amount:(VarUInteger 16) from:MsgAddress
                     response_address:MsgAddress
                     forward_ton_amount:(VarUInteger 16)
                     forward_payload:(Either Cell ^Cell) 
                     = InternalMsgBody;
-}

;; read from in_msg_body params of transfer, build transfer message and send it to counterparty jetton wallet
() send_tokens (slice in_msg_body, slice sender_address, int msg_value, int fwd_fee) impure inline_ref {
  int query_id = in_msg_body~load_query_id();
  int jetton_amount = in_msg_body~load_coins();
  slice to_owner_address = in_msg_body~load_msg_addr();
  force_chain(to_owner_address);
  (int balance, slice owner_address,
   slice jetton_master_address, cell jetton_wallet_code,
   int locked, int lock_expiration) = load_data();
  balance -= jetton_amount;

  throw_unless(error::unauthorized_transfer, equal_slice_bits(owner_address, sender_address));
  throw_unless(error::not_enough_jettons, balance >= 0);

  cell state_init = calculate_jetton_wallet_state_init(to_owner_address, jetton_master_address, jetton_wallet_code);
  slice to_wallet_address = calc_address(state_init);
  slice response_address = in_msg_body~load_msg_addr();
  cell custom_payload = in_msg_body~load_maybe_ref();
  int forward_ton_amount = in_msg_body~load_coins();
  throw_unless(error::malformed_forward_payload, slice_bits(in_msg_body) >= 1);
  slice either_forward_payload = in_msg_body;
  var msg_body = begin_cell()
          .store_op(op::internal_transfer)
          .store_query_id(query_id)
          .store_coins(jetton_amount)
          .store_slice(owner_address)
          .store_slice(response_address)
          .store_coins(forward_ton_amount)
          .store_slice(either_forward_payload)
          .end_cell();
  var msg = begin_cell()
    .store_msg_flag(msg_flag::bounceable)
    .store_slice(to_wallet_address)
    .store_coins(0)
    .store_msgbody_prefix_stateinit(state_init, msg_body);


  int fwd_count = forward_ton_amount ? 2 : 1;
  throw_unless(error::not_enough_tons, msg_value >
                     forward_ton_amount +
                     ;; 3 messages: wal1->wal2,  wal2->owner, wal2->response
                     ;; but last one is optional (it is ok if it fails)
                     fwd_count * fwd_fee +
                     (2 * gas_consumption + min_tons_for_storage));
                     ;; universal message send fee calculation may be activated here
                     ;; by using this instead of fwd_fee
                     ;; msg_fwd_fee(to_wallet, msg_body, state_init, 15)

  send_raw_message(msg.end_cell(), CARRY_REMAINING_GAS); ;; revert on errors
  save_data(balance, owner_address, jetton_master_address, jetton_wallet_code, locked, lock_expiration);
}

{-
  internal_transfer  query_id:uint64 amount:(VarUInteger 16) from:MsgAddress
                     response_address:MsgAddress
                     forward_ton_amount:(VarUInteger 16)
                     forward_payload:(Either Cell ^Cell) 
                     = InternalMsgBody;
-}

;; read incoming transfer message, authorize by address, update balance and send notifications/excesses
() receive_tokens (slice in_msg_body, slice sender_address, int my_ton_balance, int fwd_fee, int msg_value) impure inline_ref {
  ;; NOTE we can not allow fails in action phase since in that case there will be
  ;; no bounce. Thus check and throw in computation phase.
  (int balance, slice owner_address,
   slice jetton_master_address, cell jetton_wallet_code,
   int locked, int lock_expiration) = load_data();
  if(external_param::using_libs) {
    ;; libs related code
    ifnot(balance) {
      ifnot (jetton_wallet_code.cell_depth()) {
        ;;code is library
        set_code(begin_cell().store_slice(jetton_wallet_code.begin_parse()).end_cell());
      }
    }
  }
  int query_id = in_msg_body~load_query_id();
  int jetton_amount = in_msg_body~load_coins();
  balance += jetton_amount;
  slice from_address = in_msg_body~load_msg_addr();
  slice response_address = in_msg_body~load_msg_addr();
  throw_unless(error::unauthorized_incoming_transfer,
      equal_slice_bits(jetton_master_address, sender_address)
      |
      equal_slice_bits(calc_user_wallet(from_address, jetton_master_address, jetton_wallet_code), sender_address)
  );
  int forward_ton_amount = in_msg_body~load_coins();

  int ton_balance_before_msg = my_ton_balance - msg_value;
  ;;int storage_fee = min_tons_for_storage - min(ton_balance_before_msg, min_tons_for_storage);
  ;;msg_value -= (storage_fee + gas_consumption);
  if(forward_ton_amount) {
    msg_value -= (forward_ton_amount + fwd_fee);
    slice either_forward_payload = in_msg_body;

    var msg_body = begin_cell()
        .store_op(op::transfer_notification)
        .store_query_id(query_id)
        .store_coins(jetton_amount)
        .store_slice(from_address)
        .store_slice(either_forward_payload)
        .end_cell();

    var msg = begin_cell()
      .store_msg_flag(msg_flag::non_bounceable) ;; we should not bounce here cause receiver can have uninitialized contract
      .store_slice(owner_address)
      .store_coins(forward_ton_amount)
      .store_msgbody_prefix_ref(msg_body);

    send_raw_message(msg.end_cell(), PAY_FEES_SEPARATELY);
  }
  raw_reserve(max(ton_balance_before_msg, min_tons_for_storage), 2);
  if ((response_address.preload_uint(2) != 0) & (msg_value > 0)) {
    var msg = begin_cell()
            .store_msg_flag(msg_flag::non_bounceable)
            .store_slice(response_address)
            .store_coins(0)
            .store_msgbody_prefix_slice()
            .store_op(op::excesses)
            .store_query_id(query_id);
    send_raw_message(msg.end_cell(), CARRY_REMAINING_BALANCE | IGNORE_ERRORS);
  }

  save_data(balance, owner_address, jetton_master_address, jetton_wallet_code, locked, lock_expiration);
}

{-
-}

() burn_tokens (slice in_msg_body, slice sender_address, int msg_value, int fwd_fee) impure inline_ref {
  ;; NOTE we can not allow fails in action phase since in that case there will be
  ;; no bounce. Thus check and throw in computation phase.
  (int balance, slice owner_address,
   slice jetton_master_address, cell jetton_wallet_code,
   int locked, int lock_expiration) = load_data();
  int query_id = in_msg_body~load_query_id();
  int jetton_amount = in_msg_body~load_coins();
  slice response_address = in_msg_body~load_msg_addr();
  ;; ignore custom payload
  cell custom_payload = in_msg_body~load_dict();
  balance -= jetton_amount;
  throw_unless(error::unauthorized_transfer, equal_slice_bits(owner_address, sender_address));
  throw_unless(error::not_enough_jettons, balance >= 0);
  throw_unless(error::burn_fee_not_matched, msg_value > fwd_fee + 2 * gas_consumption + burn_notification);

  var msg_body = begin_cell()
      .store_op(op::burn_notification)
      .store_query_id(query_id)
      .store_coins(jetton_amount)
      .store_slice(owner_address)
      .store_slice(response_address)
      .store_maybe_ref(custom_payload)
      .end_cell();

  var msg = begin_cell()
    .store_msg_flag(msg_flag::bounceable)
    .store_slice(jetton_master_address)
    .store_coins(0) ;; msg value
    .store_msgbody_prefix_ref(msg_body);

  send_raw_message(msg.end_cell(), CARRY_REMAINING_GAS);

  save_data(balance, owner_address, jetton_master_address, jetton_wallet_code, locked, lock_expiration);
}

() on_bounce (slice in_msg_body) impure inline_ref {
  in_msg_body~skip_bounce_flag();
  (int balance, slice owner_address,
   slice jetton_master_address, cell jetton_wallet_code,
   int locked, int lock_expiration) = load_data();
  int op = in_msg_body~load_op();
  throw_unless(error::unknown_action_bounced, (op == op::internal_transfer) | (op == op::burn_notification));
  int query_id = in_msg_body~load_query_id();
  int jetton_amount = in_msg_body~load_coins();
  balance += jetton_amount;
  save_data(balance, owner_address, jetton_master_address, jetton_wallet_code, locked, lock_expiration);
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
  if (in_msg_body.slice_empty?()) { ;; ignore empty messages
    return ();
  }

  slice cs = in_msg_full.begin_parse();
  int flags = cs~load_uint(4);
  if (flags & 1) {
    on_bounce(in_msg_body);
    return ();
  }
  slice sender_address = cs~load_msg_addr();
  cs~load_msg_addr(); ;; skip dst
  cs~load_coins(); ;; skip value
  cs~load_dict(); ;; skip extracurrency collection
  cs~load_coins(); ;; skip ihr_fee
  int fwd_fee = muldiv(cs~load_coins(), 3, 2); ;; we use message fwd_fee for estimation of forward_payload costs

  int op = in_msg_body~load_op();

  if (op == op::transfer) { ;; outgoing transfer
    send_tokens(in_msg_body, sender_address, msg_value, fwd_fee);
    return ();
  }

  if (op == op::internal_transfer) { ;; incoming transfer
    receive_tokens(in_msg_body, sender_address, my_balance, fwd_fee, msg_value);
    return ();
  }

  if (op == op::burn) { ;; burn
    burn_tokens(in_msg_body, sender_address, msg_value, fwd_fee);
    return ();
  }

  (int balance, slice owner_address,
   slice jetton_master_address, cell jetton_wallet_code,
   int locked, int lock_expiration) = load_data();
  ;; Withdraw tons or jettons which accidentally were sent to this jettonWallet
  if (op == op::withdraw_tons) {
    throw_unless(error::unauthorized_transfer, equal_slice_bits(owner_address, sender_address));
    raw_reserve(min_tons_for_storage, 0);
    var msg = begin_cell()
            .store_msg_flag(msg_flag::non_bounceable)
            .store_slice(owner_address)
            .store_coins(0)
            .store_msgbody_prefix_slice()
            .store_op(op::excesses)
            .store_query_id(in_msg_body~load_query_id());
    in_msg_body.end_parse();
    return send_raw_message(msg.end_cell(), CARRY_REMAINING_BALANCE | IGNORE_ERRORS);
  }

  if (op == op::withdraw_jettons) {
    throw_unless(error::unauthorized_transfer, equal_slice_bits(owner_address, sender_address));
    int query_id = in_msg_body~load_query_id();
    slice child_wallet =  in_msg_body~load_msg_addr();
    int amount =  in_msg_body~load_coins();
    cell custom_payload = in_msg_body~load_maybe_ref();
    in_msg_body.end_parse();
    var msg = begin_cell()
            .store_msg_flag(msg_flag::bounceable)
            .store_slice(child_wallet)
            .store_coins(0)
            .store_msgbody_prefix_ref(
              begin_cell()
              .store_op(op::transfer)
              .store_query_id(query_id)
              .store_coins(amount)
              .store_slice(owner_address)
              .store_slice(owner_address)
              .store_maybe_ref(custom_payload)
              .store_coins(0)
              .store_int(false, 1)
              .end_cell()
            );
    return send_raw_message(msg.end_cell(), CARRY_REMAINING_GAS);
  }

  if(op == op::vote) {
    ;; vote query_id:uint64 voting_address:MsgAddressInt
    ;;      expiration_date:uint48 vote:Bool need_confirmation:Bool = InternalMsgBody;
    throw_unless(error::unauthorized_vote_submition, equal_slice_bits(owner_address, sender_address));
    int query_id = in_msg_body~load_query_id();
    slice voting = in_msg_body~load_msg_addr();
    int expiration_date = in_msg_body~load_uint(48);
    throw_unless(error::expiration_date_too_high, now() + max_voting_duration > expiration_date);
    throw_unless(error::voting_already_finished, now() < expiration_date);
    int vote = in_msg_body~load_int(1);
    int need_confirmation = in_msg_body~load_int(1);
    in_msg_body.end_parse();
    cell vote_keeper_initstate = calculate_vote_keeper_state_init (my_address(), voting, vote_keeper_code());
    slice vote_keeper = calc_address(vote_keeper_initstate);
    locked += balance;
    balance = 0;
    lock_expiration = max(expiration_date, lock_expiration);
    ;; request_vote query_id:uint64 voter:MsgAddressInt expiration_date:uint48
    ;;                weight:Coins vote:Bool need_confirmation:Bool = InternalMsgBody;
    var msg = begin_cell()
            .store_msg_flag(msg_flag::bounceable)
            .store_slice(vote_keeper)
            .store_coins(0)
            .store_msgbody_prefix_stateinit_inline_body(vote_keeper_initstate)
            .store_op(op::request_vote)
            .store_query_id(query_id)
            .store_slice(owner_address)
            .store_uint(expiration_date, 48)
            .store_coins(locked)
            .store_int(vote, 1)
            .store_int(need_confirmation, 1);
    send_raw_message(msg.end_cell(), CARRY_REMAINING_GAS);
    save_data(balance, owner_address, jetton_master_address, jetton_wallet_code, locked, lock_expiration);
    return ();
  }
  if(op == op::create_voting_through_wallet) {
    throw_unless(error::unauthorized_vote_submition, equal_slice_bits(owner_address, sender_address));
    ;; create_voting_with_wallet query_id:uint64 expiration_date:uint48 proposal:^Proposal = InternalMsgBody;
    int query_id = in_msg_body~load_query_id();
    (int voting_type, int expiration_date, cell proposal) = (in_msg_body~load_uint(64), in_msg_body~load_uint(48), in_msg_body~load_ref());
    throw_unless(error::expiration_date_too_high, now() + max_voting_duration > expiration_date);
    throw_unless(error::voting_already_finished, now() < expiration_date);
    in_msg_body.end_parse();
    var msg = begin_cell()
            .store_msg_flag(msg_flag::bounceable)
            .store_slice(jetton_master_address)
            .store_coins(0)
            .store_msgbody_prefix_slice()
            .store_op(op::create_voting)
            .store_query_id(query_id)
            .store_uint(expiration_date, 48)
            .store_ref(proposal)
            .store_uint(0, 64); ;; voting_type
    send_raw_message(msg.end_cell(), CARRY_REMAINING_GAS);
    return ();
  }
  if(op == op::confirm_voting) {
    ;; confirm_voting query_id:uint64 = InternalMsgBody;
    throw_unless(error::unauthorized_vote_submition, equal_slice_bits(jetton_master_address, sender_address));
    int query_id = in_msg_body~load_query_id();
    in_msg_body.end_parse();
    ;; vote_confirmation query_id:uint64 = InternalMsgBody;
    var msg = begin_cell()
            .store_msg_flag(msg_flag::non_bounceable)
            .store_slice(owner_address)
            .store_coins(0)
            .store_msgbody_prefix_slice()
            .store_op(op::vote_confirmation)
            .store_query_id(query_id);
    send_raw_message(msg.end_cell(), CARRY_REMAINING_GAS);
    return ();
  }
  if(op == op::voting_created) {
    ;; voting_created query_id:uint64 voting_address:MsgAddressInt = InternalMsgBody;
    throw_unless(error::unauthorized_vote_submition, equal_slice_bits(jetton_master_address, sender_address));
    int query_id = in_msg_body~load_query_id();
    slice voting_address = in_msg_body~load_msg_addr();
    in_msg_body.end_parse();
    ;; voting_confirmation query_id:uint64 voting_address:MsgAddressInt = InternalMsgBody;
    var msg = begin_cell()
            .store_msg_flag(msg_flag::non_bounceable)
            .store_slice(owner_address)
            .store_coins(0)
            .store_msgbody_prefix_slice()
            .store_op(op::voting_confirmation)
            .store_query_id(query_id)
            .store_slice(voting_address);
    send_raw_message(msg.end_cell(), CARRY_REMAINING_GAS);
    return ();
  }
  throw(error::unknown_action);
}

(int, slice, slice, cell) get_wallet_data() method_id {
  (int balance, slice owner, slice minter, cell code, _, _) = load_data();
  return (balance, owner, minter, code);
}

(int, slice, slice, cell, int, int) get_dao_wallet_data() method_id {
  return load_data();
}


(slice) get_vote_keeper_address(slice voting_address) method_id {
  (int balance, slice owner_address,
          slice jetton_master_address, cell jetton_wallet_code,
          int locked, int lock_expiration) = load_data();
  cell vote_keeper_initstate = calculate_vote_keeper_state_init (my_address(), voting_address, vote_keeper_code());
  return calc_address(vote_keeper_initstate);
}
