#include "stdlib.func";
#include "jetton-utils.func";
#include "dao-utils.func";
#include "voting-results-utils.func";
#include "error-codes.func";
#include "op-codes.func";
#include "params.func";
#include "messages.func";

;; Jettons discoverable smart contract

;; 6905(computational_gas_price) * 1000(cur_gas_price) = 6905000
;; ceil(6905000) = 10000000 ~= 0.01 TON
const int provide_address_gas_consumption = 10000000;
const int provide_voting_data_gas_consumption = 20000000;
const int voting_results_init_fee = 20000000;


;; storage scheme
;; storage#_ total_supply:Coins admin_address:MsgAddress content:^Cell
;;           voting_id:uint64 voting_code:^Cell
;;           = Storage;
;;
(int, slice, cell, int, cell) load_data() inline {
    slice ds = get_data().begin_parse();
    return (
            ds~load_coins(), ;; total_supply
            ds~load_msg_addr(), ;; admin_address
            ds~load_ref(), ;; content
            ds~load_uint(64), ;; voting_id: votings has sequential ids like nft
            ds~load_ref() ;; voting_code
    );
}

() save_data(int total_supply, slice admin_address,
             cell content,
             int voting_id, cell voting_code) impure inline {
    set_data(begin_cell()
            .store_coins(total_supply)
            .store_slice(admin_address)
            .store_ref(content)
            .store_uint(voting_id, 64)
            .store_ref(voting_code)
            .end_cell()
    );
}

;; Change this logic to use your own voting rules
int is_proposal_accepted(int voted_for, int voted_against, int total_votes) inline {
    {-
      ;; Simple
      int threshold = muldiv(total_votes, 1, 2);
      return voted_for > threshold;
    -}

      ;; Minimal quorum, only voters count
      int quorum = (voted_for + voted_against) > (total_votes / 10);
      return quorum & ( voted_for > voted_against);

    {-
      ;; Soft majority voting https://forum.everscale.network/t/developers-contest-soft-majority-voting-system-finished/65
      return voted_for > (muldiv(voted_against, 4, 5) + (total_votes / 10));
      ;; soft supermajority
      return voted_for > (voted_against + (total_votes / 3));
    -}
}

() mint_tokens(slice to_address, int amount, cell master_msg) impure {
    cell state_init = calculate_jetton_wallet_state_init(
                        to_address,
                        my_address(),
                        jetton_wallet_code());
    slice to_wallet_address = calc_address(state_init);
    var msg = begin_cell()
            .store_msg_flag(msg_flag::bounceable)
            .store_slice(to_wallet_address)
            .store_coins(amount)
            .store_msgbody_prefix_stateinit(state_init, master_msg);
    int mode = PAY_FEES_SEPARATELY;
    if(amount == 0) {
        mode = CARRY_REMAINING_GAS;
    }
    send_raw_message(msg.end_cell(), mode); ;; pay transfer fees separately, revert on errors
}

() recv_internal(int balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore empty messages
        return ();
    }
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);

    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }
    slice sender_address = cs~load_msg_addr();
    cs~load_msg_addr(); ;; skip dst
    cs~load_coins(); ;; skip value
    cs~skip_bits(1); ;; skip extracurrency collection
    cs~load_coins(); ;; skip ihr_fee
    int fwd_fee = muldiv(cs~load_coins(), 3, 2); ;; we use message fwd_fee for estimation of forward_payload costs

    int op = in_msg_body~load_op();
    int query_id = in_msg_body~load_query_id();

    (int total_supply, slice admin_address,
     cell content,
     int voting_id, cell voting_code) = load_data();

    if (op == op::mint) {
        throw_unless(error::unauthorized_mint_request, equal_slice_bits(sender_address, admin_address));
        slice to_address = in_msg_body~load_msg_addr();
        int jetton_amount = in_msg_body~load_coins();
        int forward_ton_amount = in_msg_body~load_coins();
        int total_ton_amount = in_msg_body~load_coins();
        if(total_ton_amount > 0) {
            throw_unless(error::discovery_fee_not_matched, total_ton_amount > forward_ton_amount);
        } else {
            throw_unless(error::discovery_fee_not_matched, msg_value > forward_ton_amount);
        }
        cell mint_request = begin_cell()
                .store_op(op::internal_transfer)
                .store_query_id(query_id)
                .store_coins(jetton_amount) ;; max 124 bit
                .store_uint(0, 2) ;; from_address, addr_none$00
                .store_slice(to_address) ;; response_address, 3 + 8 + 256 = 267 bit
                .store_coins(forward_ton_amount) ;; forward_amount, 4 bit if zero
                .store_uint(0, 1) ;; no forward_payload, 1 bit
                .end_cell();
        mint_tokens(to_address, total_ton_amount, mint_request);
        save_data(total_supply + jetton_amount, admin_address,
                  content,
                  voting_id, voting_code);
        return ();
    }

    if (op == op::burn_notification) {
        int jetton_amount = in_msg_body~load_coins();
        slice from_address = in_msg_body~load_msg_addr();
        throw_unless(error::unauthorized_burn_request,
                equal_slice_bits(calc_user_wallet(from_address, my_address(), jetton_wallet_code()), sender_address)
        );
        save_data(total_supply - jetton_amount, admin_address,
                content,
                voting_id, voting_code);
        slice response_address = in_msg_body~load_msg_addr();
        cell custom_payload = in_msg_body~load_dict();
        var msg = begin_cell().store_msg_flag(msg_flag::non_bounceable);
        if(admin_address.preload_uint(2) != 0) {
           ;; Note, admin should manage excesses sending himself
           msg = msg.store_slice(admin_address)
                    .store_coins(0)
                    .store_msgbody_prefix_ref(
                        begin_cell()
                          .store_op(op::jettons_burned)
                          .store_query_id(query_id)
                          .store_coins(jetton_amount)
                          .store_slice(from_address)
                          .store_slice(response_address)
                          .store_slice(cell_null?(custom_payload) ? "" : custom_payload.begin_parse())
                        .end_cell()
                   );
        } elseif (response_address.preload_uint(2) != 0) {
           msg = msg.store_slice(admin_address)
                    .store_coins(0)
                    .store_msgbody_prefix_slice()
                    .store_op(op::excesses)
                    .store_query_id(query_id);
        } else {
          return ();
        }
        send_raw_message(msg.end_cell(), IGNORE_ERRORS | CARRY_REMAINING_GAS);
        return ();
    }

    if (op == op::provide_wallet_address) {
        throw_unless(error::discovery_fee_not_matched, msg_value > fwd_fee + provide_address_gas_consumption);

        slice owner_address = in_msg_body~load_msg_addr();
        int include_address? = in_msg_body~load_uint(1);

        cell included_address = include_address?
                ? begin_cell().store_slice(owner_address).end_cell()
                : null();

        var msg = begin_cell()
                .store_msg_flag(msg_flag::bounceable)
                .store_slice(sender_address)
                .store_coins(0)
                .store_msgbody_prefix_slice()
                .store_op(op::take_wallet_address)
                .store_query_id(query_id);

        if (is_resolvable?(owner_address)) {
            msg = msg.store_slice(calc_user_wallet(owner_address, my_address(), jetton_wallet_code()));
        } else {
            msg = msg.store_uint(0, 2); ;; addr_none
        }
        send_raw_message(msg.store_maybe_ref(included_address).end_cell(), CARRY_REMAINING_GAS);
        return ();
    }

    if (op == op::change_admin) { ;; change admin
        throw_unless(error::unauthorized_change_admin_request, equal_slice_bits(sender_address, admin_address));
        slice new_admin_address = in_msg_body~load_msg_addr();
        save_data(total_supply, new_admin_address,
                content,
                voting_id, voting_code);
        return ();
    }

    if (op == op::change_content) { ;; change content, delete this for immutable tokens
        throw_unless(error::unauthorized_change_content_request, equal_slice_bits(sender_address, admin_address));
        save_data(total_supply, admin_address,
                in_msg_body~load_ref(),
                voting_id, voting_code);
        return ();
    }

    if (op == op::upgrade_code) { ;; upgrades code
        throw_unless(error::unauthorized_code_upgrade_request, equal_slice_bits(sender_address, admin_address));
        cell self_code = in_msg_body~load_maybe_ref();
        ifnot(self_code.null?()) {
            set_code(self_code);
        }
        cell new_voting_code = in_msg_body~load_maybe_ref();
        ifnot(new_voting_code.null?()) {
            voting_code = new_voting_code;
        }
        save_data(total_supply, admin_address,
                content,
                voting_id, voting_code);
        return ();
    }

    if (op == op::create_voting) { ;; anybody can create a voting proposal
        (int expiration_date, cell proposal) = (in_msg_body~load_uint(48), in_msg_body~load_ref());
        int voting_type = in_msg_body~load_uint(64);
        if(external_param::only_polls) {
            ;; FIXME: not wrong vote id, but voting type
            ;; also need to check here if type is 2 or more?
            throw_unless( error::forbidden_vote_id, voting_type == 1);
        }

        if(voting_type == 0) { ;; simple execution
            throw_unless(error::voting_already_finished, now() < expiration_date);
            throw_unless(error::expiration_date_too_high, now() + max_voting_duration > expiration_date);
            cell state_init = calculate_dao_voting_state_init (my_address(), voting_id, voting_code);
            slice voting = calc_address(state_init);
            var msg_body = begin_cell()
                    .store_op(op::init_voting)
                    .store_query_id(query_id)
                    .store_uint(expiration_date, 48)
                    .store_uint(voting_type, 64)
                    .store_ref(proposal)
                    .store_slice(sender_address)
                    .end_cell();
            var msg = begin_cell()
                    .store_msg_flag(msg_flag::bounceable)
                    .store_slice(voting)
                    .store_coins(0)
                    .store_msgbody_prefix_stateinit(state_init, msg_body);
            send_raw_message(msg.end_cell(), CARRY_REMAINING_GAS);
        } elseif (voting_type == 1) { ;;no execution, voting results
            slice cs  = proposal.begin_parse();
            ;; expiration date in first 48 bits is useless?
            int voting_duration = cs~load_uint(48);
            throw_unless(error::voting_already_finished, voting_duration > 0);
            throw_unless(error::expiration_date_too_high, max_voting_duration > voting_duration);
            expiration_date = now() + voting_duration;
            cell voting_body = cs~load_ref();
            cell state_init = calculate_dao_voting_state_init(my_address(), voting_id, voting_code);
            slice voting = calc_address(state_init);
            cell vr_state_init = calculate_voting_results_state_init(voting_body, voting_duration, my_address());
            slice voting_results = calc_address(vr_state_init);
            var vr_msg_body = begin_cell()
                    .store_op(op::init_voting_results)
                    .store_query_id(query_id)
                    .store_uint(voting_id, 64)
                    .end_cell();
            var vr_msg = begin_cell()
                    .store_msg_flag(msg_flag::bounceable)
                    .store_slice(voting_results)
                    .store_coins(voting_results_init_fee)
                    .store_msgbody_prefix_stateinit(vr_state_init, vr_msg_body);
            send_raw_message(vr_msg.end_cell(), REVERT_ON_ERRORS);
            var msg_body = begin_cell()
                    .store_op(op::init_voting)
                    .store_query_id(query_id)
                    .store_uint(expiration_date, 48)
                    .store_uint(voting_type, 64)
                    .store_ref(proposal)
                    .store_slice(sender_address)
                    .end_cell();
            var msg = begin_cell()
                    .store_msg_flag(msg_flag::bounceable)
                    .store_slice(voting)
                    .store_coins(0)
                    .store_msgbody_prefix_stateinit(state_init, msg_body);
            raw_reserve(balance - msg_value, 0);
            send_raw_message(msg.end_cell(), CARRY_REMAINING_BALANCE);
        }
        voting_id += 1;
        save_data(total_supply, admin_address,
                content,
                voting_id, voting_code);
        return ();
    }
    if(op == op::voting_initiated) {
        (int voting_id, int expiration_date) = (in_msg_body~load_uint(64), in_msg_body~load_uint(48));
        slice voting_address = calculate_dao_voting_address(my_address(), voting_id, voting_code);
        throw_unless(error::unauthorized_vote_execution, equal_slice_bits(sender_address, voting_address));
        slice initiator = in_msg_body~load_msg_addr();
        var msg = begin_cell()
                .store_msg_flag(msg_flag::bounceable)
                .store_slice(initiator)
                .store_coins(0)
                .store_msgbody_prefix_slice()
                .store_op(op::voting_created)
                .store_query_id(query_id)
                .store_slice(voting_address);
        return send_raw_message(msg.end_cell(), CARRY_REMAINING_GAS | IGNORE_ERRORS);
    }
    if(op == op::execute_vote_result) {
        (int voting_id, int expiration_date) = (in_msg_body~load_uint(64), in_msg_body~load_uint(48));
        int voting_type = in_msg_body~load_uint(64);
        slice voting_address = calculate_dao_voting_address(my_address(), voting_id, voting_code);
        throw_unless(error::unauthorized_vote_execution, equal_slice_bits(sender_address, voting_address));
        throw_unless(error::voting_not_finished, now() >= expiration_date);
        (int voted_for, int voted_against, cell payload) = (in_msg_body~load_coins(), in_msg_body~load_coins(), in_msg_body~load_maybe_ref());
        if(voting_type == 0) { ;; default "send message on success"
            if(is_proposal_accepted(voted_for, voted_against, total_supply)) {
                ifnot(payload.null?()) {
                    if(payload.pass_the_filter?()) {
                        send_raw_message(payload, CARRY_REMAINING_GAS);
                    }
                }
            }
        } elseif (voting_type == 1) { ;; "send results"
            slice cs  = payload.begin_parse();
            int voting_duration = cs~load_uint(48);
            cell voting_body = cs~load_ref();
            cell vr_state_init = calculate_voting_results_state_init(voting_body, voting_duration, my_address());
            slice voting_results = calc_address(vr_state_init);
            var msg = begin_cell()
                    .store_msg_flag(msg_flag::non_bounceable)
                    .store_slice(voting_results)
                    .store_coins(0)
                    .store_msgbody_prefix_slice()
                    .store_op(op::send_vote_result)
                    .store_query_id(query_id)
                    .store_uint(voting_id, 64)
                    .store_coins(voted_for)
                    .store_coins(voted_against);
            return send_raw_message(msg.end_cell(), CARRY_REMAINING_GAS);
        }
        return ();
    }

    if(op == op::request_confirm_voting) {
        ;;request_confirm_voting query_id:uint64
        ;;                       voting_id:uint64 voter:MsgAddressInt  = InternalMsgBody; // Voting -> DAO
        (int voting_id) = (in_msg_body~load_uint(64));
        slice voting_address = calculate_dao_voting_address(my_address(), voting_id, voting_code);
        throw_unless(error::unauthorized_vote_execution, equal_slice_bits(sender_address, voting_address));
        slice voter = in_msg_body~load_msg_addr();
        in_msg_body.end_parse();
        slice voter_wallet = calc_user_wallet(voter, my_address(), jetton_wallet_code());
        ;;confirm_voting query_id:uint64 = InternalMsgBody; // DAO -> voter_wallet
        var msg = begin_cell()
                .store_msg_flag(msg_flag::bounceable)
                .store_slice(voter_wallet)
                .store_coins(0)
                .store_msgbody_prefix_slice()
                .store_op(op::confirm_voting)
                .store_query_id(query_id);
        return send_raw_message(msg.end_cell(), CARRY_REMAINING_GAS | IGNORE_ERRORS);
    }
    throw(error::unknown_op);
}

(int, int, slice, cell, cell) get_jetton_data() method_id {
    (int total_supply, slice admin_address,
            cell content,
            int voting_id, cell voting_code) = load_data();
    return (total_supply, -1, admin_address, content, jetton_wallet_code());
}

slice get_wallet_address(slice owner_address) method_id {
    return calc_user_wallet(owner_address, my_address(), jetton_wallet_code());
}

slice get_voting_address(int voting_id) method_id {
    (int total_supply, slice admin_address,
            cell content,
            _, cell voting_code) = load_data();
    return calculate_dao_voting_address(my_address(), voting_id, voting_code);
}
cell get_voting_code() method_id {
    (int total_supply, slice admin_address,
            cell content,
            int voting_id, cell voting_code) = load_data();
    return voting_code;
}

slice get_voting_results_address(cell voting_body, int duration) method_id {
    cell vr_state_init = calculate_voting_results_state_init(voting_body, duration, my_address());
    return calc_address(vr_state_init);
}
