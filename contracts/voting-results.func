;; Special contract with only purpose to demonstrate final voting result
;; It's address is deterministic given known voting_body (what this voting is about),
;; voting_duration and dao-address

;; For instance one can search for voting results about network config updates
;; where voting_body contains hash of new config parameter
;; voting_duration is 3 days
;; and dao-address is address of some protocol

#include "stdlib.func";
#include "error-codes.func";
#include "op-codes.func";
#include "messages.func";

const int provide_results_gas_consumption = 6000000; ;; 0.006 TON

(int, cell, int, slice, int, int, int, int) load_data() inline {
    slice cs = get_data().begin_parse();
    int init? = cs~load_int(1);
    cell voting_body = cs~load_ref();
    int voting_duration = cs~load_int(48);
    slice dao_address = cs~load_msg_addr();

    if(init?) {
      int finished? = cs~load_int(1);
      int voting_id = cs~load_uint(64);
      int votes_for = cs~load_coins();
      int votes_against = cs~load_coins();
      return (init?, voting_body, voting_duration, dao_address,
              finished?, voting_id, votes_for, votes_against);
    } else {
        return (init?, voting_body, voting_duration, dao_address,
                false, -1, 0, 0);
    }
}
() save_data(int init?, cell voting_body, int voting_duration, slice dao_address,
             int finished?, int voting_id, int votes_for, int votes_against) impure inline {
    var data = begin_cell().store_int(init?, 1)
                           .store_ref(voting_body)
                           .store_uint(voting_duration, 48)
                           .store_slice(dao_address);
    if (init?) {
        data = data.store_int(finished?, 1)
                   .store_uint(voting_id, 64)
                   .store_coins(votes_for)
                   .store_coins(votes_against);
    }
    set_data(data.end_cell());
}

() main (int balance, int msg_value, cell in_msg_full, slice in_msg_body) {
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if (flags & 1) {
        return ();
    }
    slice sender_address = cs~load_msg_addr();
    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);
    if (op == op::init_voting_results) {
        (int init?, cell voting_body, int voting_duration, slice dao_address,
         int finished?, int voting_id, int votes_for, int votes_against) = load_data();
        throw_if(error::already_inited, init?);
        throw_unless(error::unauthorized_init, equal_slice_bits(sender_address, dao_address));
        voting_id = in_msg_body~load_uint(64);
        init? = true;
        finished? = false;
        votes_for = votes_against = 0;
        return save_data(init?, voting_body, voting_duration, dao_address,
                         finished?, voting_id, votes_for, votes_against);
    } 
    if (op == op::send_vote_result) {
        (int init?, cell voting_body, int voting_duration, slice dao_address,
         int finished?, int voting_id, int votes_for, int votes_against) = load_data();
        throw_unless(error::not_inited, init?);
        throw_if(error::already_finished , finished?);
        throw_unless(error::unauthorized_vote_results, equal_slice_bits(sender_address, dao_address));
        int incoming_voting_id = in_msg_body~load_uint(64);
        throw_unless(error::voting_id_mismatch , voting_id == incoming_voting_id);
        votes_for = in_msg_body~load_coins();
        votes_against = in_msg_body~load_coins();
        finished? = true;
        return save_data(init?, voting_body, voting_duration, dao_address,
                finished?, voting_id, votes_for, votes_against);
    } 
    if (op == op::provide_voting_results) {
        cs~load_msg_addr(); ;; skip dst
        cs~load_coins(); ;; skip value
        cs~skip_bits(1); ;; skip extracurrency collection
        cs~load_coins(); ;; skip ihr_fee
        int fwd_fee = muldiv(cs~load_coins(), 3, 2);
        throw_unless(error::results_discovery_fee_not_matched, msg_value >= fwd_fee + provide_results_gas_consumption);
        slice ds = get_data().begin_parse();
        var msg = begin_cell()
                .store_msg_flag(msg_flag::bounceable)
                .store_slice(sender_address)
                .store_coins(0)
                .store_msgbody_prefix_ref(
                  begin_cell()
                    .store_op(op::take_voting_results)
                    .store_query_id(query_id)
                    .store_slice(ds)
                   .end_cell());
        return send_raw_message(msg.end_cell(), CARRY_REMAINING_GAS);
    }
    throw(error::unknown_op);
}

;;    (int init?, cell voting_body, int voting_duration, slice dao_address,
;;     int finished?, int voting_id, int votes_for, int votes_against)
var get_voting_results() method_id {
  return load_data();
}
